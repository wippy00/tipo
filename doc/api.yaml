openapi: 3.0.3
info:
  title: wasa-text api
  description: >
    This is the API documentation for the wasa-text project.
    The project is a chat application that allows users to chat with each other.
    The API allows users to log in, create groups, send messages, and more.
  version: "1"

servers:
  - url: http://localhost:3000
    description: Development server

tags:
  - name: login
    description: Operations related to user login
  - name: user
    description: Operations related to user management
  - name: conversation
    description: Operations related to conversations and groups
  - name: message
    description: Operations related to sending and managing messages

paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: >
        If the user does not exist, it will be created, and an identifier is returned. 
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              description: User name details to log in or to create a new user
              properties:
                name:
                  $ref: "#/components/schemas/userName"
      responses:
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: Return user id
                properties:
                  id:
                    $ref: "#/components/schemas/userId"

  /users:
    get:
      tags: ["user"]
      security:
        - bearerAuth: []
      summary: Get user info
      description: Get user info from its id
      operationId: getUser
      responses:
        "200":
          description: Return all users info
          content:
            application/json:
              schema:
                description: List of users
                type: array
                items:
                  $ref: "#/components/schemas/User"
                default: []
                example: [{"id": 1,"name": "mariOne","photo": null},{"id": 2,"name": "rino","photo": null},{"id": 3,"name": "gianna","photo": null}]
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /users/{user_id}:
    get:
      tags: ["user"]
      security:
        - bearerAuth: []
      summary: Get user info
      description: Get user info from its id
      operationId: getUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: The user identifier
          schema:
            $ref: "#/components/schemas/userId"
      responses:
        "200":
          description: Return user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /profile/name:
    put:
      tags: ["user"]
      security:
        - bearerAuth: []
      summary: Set user username
      description: Set a new username for the user
      operationId: setMyUserName

      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              description: User name details to set a new username
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/userName"
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401_Unauthorized"

  /profile/photo:
    put:
      tags: ["user"]
      security:
        - bearerAuth: []
      summary: Set profile photo
      description: Set a new profile photo for the user
      operationId: setMyPhoto
      requestBody:
        description: User photo
        required: true
        content:
          multipart/form-data:
            schema:
              description: User name details to set a new profile photo
              type: object
              properties:
                photo:
                  $ref: "#/components/schemas/userPhoto"
      responses:
        "200":
          description: Return user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/401_Unauthorized"

  /conversations:
    get:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Get conversation of user
      description: Get all conversations and groups of the user by its identifier
      operationId: getMyConversations
      responses:
        "200":
          description: List of conversations and groups
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    default: []
                    items:
                      $ref: "#/components/schemas/Conversation"
                example: [{"id": 1,"name": "I salamini il ritorno 2","photo": null,"cnv_type": "group","participants": [{"id": 1,"name": "mariOne","photo": null},{"id": 2,"name": "rino","photo": null},{"id": 3,"name": "gianna","photo": null},{"id": 4,"name": "franco","photo": null},{"id": 5,"name": "cristina","photo": null}],"last_message": {"id": 17,"text": "Niente de che","photo": null,"author": 2,"recipient": 1,"forwarded_source": 0,"timestamp": "2025-01-23T16:35:29Z"}}]

        "401":
          $ref: "#/components/responses/401_Unauthorized"
    post:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Create conversation
      description: Create conversation with a list of participants, the user who created the conversation is included
      operationId: newConversation
      requestBody:
        description: Conversation details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  $ref: "#/components/schemas/conversationName"
                photo:
                  $ref: "#/components/schemas/conversationPhoto"
                cnv_type:
                  $ref: "#/components/schemas/conversationType"
                participants:
                  type: array
                  items:
                    $ref: "#/components/schemas/userId"
                  default: []
                  minimum: 1
                
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
              example: {"id": 2,"name": "" ,"cnv_type": "chat","participants": [{"id": 2,"name": "rino","photo": null},{"id": 3,"name": "gianna","photo": null}],"last_message": null}
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "409":
          $ref: "#/components/responses/409_Conflict"


  /conversations/{conversation_id}:
    get:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Get conversation by id
      description: Get all messages of a conversation by its identifier
      operationId: getConversation
      parameters:
        - name: conversation_id
          in: path
          required: true
          description: The conversation identifier
          schema:
            $ref: "#/components/schemas/conversationId"
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Conversation"
              example: {"id": 2,"name": "Rino - Gianna","photo": null,"cnv_type": "chat","participants": [{"id": 2,"name": "rino","photo": null},{"id": 3,"name": "gianna","photo": null}],"last_message": {"id": 4,"text": "Dove vai?","photo": null,"author": 3,"recipient": 2,"forwarded_source": 0,"timestamp": "2025-01-22T17:23:18Z"}}
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversation/{conversation_id}/name:
    put:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Set group name
      description: Set a new name for a group by its identifier
      operationId: setGroupName
      parameters:
        - name: conversation_id
          in: path
          required: true
          description: The group identifier
          schema:
            $ref: "#/components/schemas/conversationId"
      requestBody:
        description: Chat details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_name:
                  $ref: "#/components/schemas/conversationName"
      responses:
        "204":
          description: No content, operation successful
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "403":
          # description: Not a Group
          $ref: "#/components/responses/403_Forbidden"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversation/{conversation_id}/photo:
    put:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Set group photo
      description: Set a new photo for a group by its identifier
      operationId: setGroupPhoto
      parameters:
        - name: conversation_id
          in: path
          required: true
          description: The group identifier
          schema:
            $ref: "#/components/schemas/conversationId"
      requestBody:
        description: Chat details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_photo:
                  $ref: "#/components/schemas/conversationPhoto"
      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "403":
          # description: Not a Group
          $ref: "#/components/responses/403_Forbidden"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversations/{conversation_id}/add/{user_id}:
    post:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Add a user to a group
      description: Add a user by its identifier to a group by its identifier
      operationId: addToGroup
      parameters:
        - name: conversation_id
          in: path
          required: true
          description: The group identifier
          schema:
            $ref: "#/components/schemas/conversationId"
        - name: user_id
          in: path
          required: true
          description: The unique identifier of the user
          schema:
            $ref: "#/components/schemas/userId"

      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "403":
          # description: Not a Group
          $ref: "#/components/responses/403_Forbidden"
        "404":
          $ref: "#/components/responses/404_NotFound"
        "409":
          $ref: "#/components/responses/409_Conflict"

  /conversations/{conversation_id}/leave:
    delete:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Leave a group
      description: Leave a group by its identifier and user identifier
      operationId: leaveGroup
      parameters:
        - name: conversation_id
          in: path
          required: true
          description: The group identifier
          schema:
            $ref: "#/components/schemas/conversationId"
      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversations/{conversation_id}/messages:
    parameters:
      - name: conversation_id
        in: path
        required: true
        description: Conversation identifier
        schema:
          # description: The id of the conversation to get the messages
          $ref: "#/components/schemas/conversationId"
    get:
      tags: ["message"]
      security:
        - bearerAuth: []
      summary: Get all messages of conversation
      description: Get all messages of conversation by its id
      operationId: getMessages
      responses:
        "200":
          description: Return all messages of the conversation
          content:
            application/json:
              schema:
                description: List of messages
                type: array
                default: []
                items:
                  $ref: "#/components/schemas/Message"
                example: [{"id": 3,"text": "Brella","photo": null,"author": 2,"recipient": 2,"forwarded_source": 0,"timestamp": "2025-01-22T17:22:15Z"},{"id": 4,"text": "Ma dove vai?","photo": null,"author": 3,"recipient": 2,"forwarded_source": 0,"timestamp": "2025-01-22T17:23:18Z"}]
        "404":
          $ref: "#/components/responses/404_NotFound"
    post:
      tags: ["message"]
      security:
        - bearerAuth: []
      summary: Send a message
      description: Send a message to a conversation
      operationId: sendMessage
      requestBody:
        description: Message details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"

      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversations/{conversation_id}/messages/{message_id}:
    delete:
      tags: ["message"]
      security:
        - bearerAuth: []
      summary: Delete a message
      description: Delete a Message by its Id
      operationId: deleteMessage
      parameters:
        - name: message_id
          in: path
          required: true
          description: The message identifier
          schema:
            $ref: "#/components/schemas/messageId"
            # description: The id of the message to delete
        - name: conversation_id
          in: path
          required: true
          description: The conversation identifier
          schema:
            $ref: "#/components/schemas/conversationId"
            # description: The id of the conversation of the message
      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversations/{conversation_id}/messages/{message_id}/forward:
    post:
      tags: ["message"]
      security:
        - bearerAuth: []
      summary: Forward a message
      description: Forward a message to another conversation
      operationId: forwardMessage
      parameters:
        - name: message_id
          in: path
          required: true
          description: The message identifier
          schema:
            $ref: "#/components/schemas/messageId"
            # description: The id of the message to forward
        - name: conversation_id
          in: path
          required: true
          description: The conversation identifier
          schema:
            $ref: "#/components/schemas/conversationId"
            # description: The id of the conversation of the message
      requestBody:
        description: Message details
        required: true
        content:
          application/json:
            schema:
              description: Forward details
              type: object
              properties:
                conversation_id_forward:
                  $ref: "#/components/schemas/conversationId"
                  # description: The id of the conversation to forward the message
      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

  /conversations/{conversation_id}/message/{message_id}/react:
    parameters:
      - name: conversation_id
        in: path
        required: true
        description: The conversation identifier
        schema:
          $ref: "#/components/schemas/conversationId"
          # description: The id of the conversation where the message is from
      - name: message_id
        in: path
        required: true
        description: The message identifier
        schema:
          $ref: "#/components/schemas/messageId"
          # description: The id of the message
    put:
      tags: ["message"]
      security:
        - bearerAuth: []
      summary: React a message
      description: React to a message
      operationId: commentMessage
      requestBody:
        description: React details
        required: true
        content:
          application/json:
            schema:
              description: React details to react to a message
              type: object
              properties:
                reaction:
                  $ref: "#/components/schemas/reactionText"

      responses:
        "200":
          description: Return reacted message
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

    delete:
      tags: ["conversation"]
      security:
        - bearerAuth: []
      summary: Unreact a message
      description: Unreact to a message
      operationId: uncommentMessage
      responses:
        "204":
          $ref: "#/components/responses/204_NoContent"
        "401":
          $ref: "#/components/responses/401_Unauthorized"
        "404":
          $ref: "#/components/responses/404_NotFound"

components:
  schemas:
    userId:
      description: user id properties
      type: integer
      example: 1
      minimum: 1
      maximum: 999

    userName:
      description: user name properties
      type: string
      example: Mario
      pattern: "^.*?$"
      minLength: 3
      maxLength: 30

    userPhoto:
      description: user photo properties
      type: string
      format: binary

    User:
      description: Schema representing a user object
      type: object
      properties:
        id:
          $ref: "#/components/schemas/userId"
        name:
          $ref: "#/components/schemas/userName"
        photo:
          $ref: "#/components/schemas/userPhoto"
      
      example:
        id: 1
        name: Mario
        photo: null
      

    conversationId:
      description: conversation id properties
      type: integer
      example: 1
      minimum: 1
      maximum: 999

    conversationName:
      description: conversation name properties
      type: string
      example: I salamini
      pattern: "^.*?$"
      minLength: 3
      maxLength: 50

    conversationPhoto:
      description: conversation photo properties
      type: string
      format: binary

    conversationType:
      description: conversation type properties
      type: string
      enum: [chat, group]
      example: group
      minLength: 3
      maxLength: 5

    conversationParticipant:
      description: conversation participant properties
      type: array
      default: []
      items:
        $ref: "#/components/schemas/User"

    Conversation:
      description: Schema representing a conversation object
      type: object
      properties:
        id:
          $ref: "#/components/schemas/conversationId"
        name:
          $ref: "#/components/schemas/conversationName"
        photo:
          $ref: "#/components/schemas/conversationPhoto"
        cnv_type:
          $ref: "#/components/schemas/conversationType"
        participants:
          $ref: "#/components/schemas/conversationParticipant"
        last_message:
          $ref: "#/components/schemas/Message"
      example:
        id: 1
        name: I salamini
        photo: null
        cnv_type: group
        participants: [{id: 1, name: Mario, photo: null}, {id: 2, name: Luigi, photo: null}]
        last_message: null

    messageId:
      description: message id
      type: integer
      example: 1
      minimum: 1
      maximum: 999

    messageText:
      description: message text properties
      type: string
      example: "Ciao"
      minLength: 0
      maxLength: 200

    messagePhoto:
      description: message photo properties
      type: string
      format: binary
      example: "[]binary"

    messageTimestamp:
      description: date time of the message creation
      type: string
      format: date-time
      example: "2024-12-26T14:16:10Z"

    Message:
      type: object
      description: Schema representing a message object
      properties:
        text:
          $ref: "#/components/schemas/messageText"
        photo:
          $ref: "#/components/schemas/messagePhoto"
        author:
          # description: User Id of the message sender
          $ref: "#/components/schemas/userId"
        recipient:
          # description: Conversation Id of the recipient conversation
          $ref: "#/components/schemas/conversationId"
        forwardedSource:
          # description: If forwarded, the message id who has been forwarded
          $ref: "#/components/schemas/messageId"
        timestamp:
          $ref: "#/components/schemas/messageTimestamp"
        reactions:
          type: array
          description: Schema representing a reaction object
          items:
            $ref: "#/components/schemas/Reaction"
          default: []
          minItems: 0
      example:
        text: "Ciao"
        photo: null
        author: 1
        recipient: 1
        forwardedSource: null
        timestamp: "2024-12-26T14:16:10Z"
        reactions: []

    reactionText:
      description: reaction text properties
      type: string
      example: "🗿"
      pattern: "^.+$" # tutto tranne stringa vuota
      minLength: 1
      maxLength: 1

    Reaction:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/userId"
        reaction:
          $ref: "#/components/schemas/reactionText"
      example:
        user: 1
        reaction: "🗿"

  responses:
    # 200_Ok:
    #   description: Ok
    #   content:
    #     application/json:
    #       schema:
    #         type: object
    #         properties:
    #           message:
    #             description: Ok message
    #             type: string
    #             example: "Operation successful"
    #             minLength: 0
    #             maxLength: 200
    #             pattern: "^.*?$"

    204_NoContent:
      description: No content, operation successful

    401_Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            description: Unauthorized response
            type: object
            properties:
              message:
                description: Unauthorized message
                type: string
                example: "Unauthorized"
                minLength: 0
                maxLength: 200
                pattern: "^.*?$"

    403_Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            description: Forbidden response
            type: object
            properties:
              message:
                description: Forbidden message
                type: string
                example: "Forbidden"
                minLength: 0
                maxLength: 200
                pattern: "^.*?$"

    404_NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            description: Not Found response
            type: object
            properties:
              message:
                description: Not Found message
                type: string
                example: "Not Found"
                minLength: 0
                maxLength: 200
                pattern: "^.*?$"

    409_Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            description: Conflict response
            type: object
            properties:
              message:
                description: Conflict
                type: string
                example: "Conflict"
                minLength: 0
                maxLength: 200
                pattern: "^.*?$"

  # securitySchemes:
  #   bearerAuth: # arbitrary name for the security scheme
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT # optional, arbitrary value for documentation purposes

  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: apiKey
      in: header
      name: authorization
